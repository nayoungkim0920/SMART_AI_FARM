1) 영상출력하기
#include <opencv2/opencv.hpp>

int main() {
    // 웹캠 열기
    cv::VideoCapture cap(0);
    if (!cap.isOpened()) {
        std::cout << "웹캠을 열 수 없습니다." << std::endl;
        return -1;
    }

    // 윈도우 생성
    cv::namedWindow("video", cv::WINDOW_AUTOSIZE);

    // 동영상 재생
    cv::Mat frame;
    while (true) {
        // 동영상에서 프레임 읽기
        cap.read(frame);

        if (frame.empty()) {
            std::cout << "이미지를 읽을 수 없거나 동영상이 끝났습니다." << std::endl;
            break;
        }

        // 동영상 보여주기
        cv::imshow("video", frame);

        // 33ms 동안 대기
        int key = cv::waitKey(33);

        // '1'을 누르면 동영상 종료
        if (key == 49) {
            std::cout << "동영상 종료" << std::endl;
            break;
        }
    }

    // 리소스 해제
    cap.release();
    cv::destroyAllWindows();

    return 0;
}

2) 녹화하기
#include <opencv2/opencv.hpp> // OpenCV 라이브러리를 포함

int main() {
    cv::VideoCapture cap(0); // 웹캠 열기
    if (!cap.isOpened()) { // 웹캠이 열리지 않으면
        std::cout << "동영상을 읽을 수 없습니다." << std::endl;
        return -1; // 프로그램 종료
    }

    double fps = 30.0; // 녹화할 프레임 수
    int width = cap.get(cv::CAP_PROP_FRAME_WIDTH); // 영상 가로 크기
    int height = cap.get(cv::CAP_PROP_FRAME_HEIGHT); // 영상 세로 크기

    // 녹화 설정(코덱 설정)
    cv::VideoWriter out("out.avi", cv::VideoWriter::fourcc('D', 'I', 'V', 'X'), fps, cv::Size(width, height));

    bool record = false; // 녹화 상태를 나타내는 변수

    while (true) {
        cv::Mat frame; // 프레임을 저장할 Mat 객체 생성
        cap.read(frame); // 웹캠에서 프레임 읽기

        if (frame.empty()) { // 프레임이 비어있으면
            std::cout << "이미지를 읽을 수 없거나 동영상이 끝났습니다." << std::endl;
            break; // 무한루프 탈출
        }

        cv::imshow("animation", frame); // 프레임을 화면에 표시
        out.write(frame); // 프레임을 동영상 파일에 저장

        int key = cv::waitKey(33); // 33ms 동안 키 입력 대기

        if (key == 49) { // '1'을 누르면
            std::cout << "동영상 종료" << std::endl;
            break; // 무한루프 탈출
        }

        if (key == 50) { // '2'를 누르면
            record = true; // 녹화 시작
            std::cout << "녹화 시작" << std::endl;
        }

        if (record) { // 녹화 중이면
            out.write(frame); // 프레임을 동영상 파일에 저장
        }

        if (key == 51) { // '3'을 누르면
            out.release(); // 녹화 종료
            std::cout << "녹화 종료" << std::endl;
        }
    }

    cap.release(); // 웹캠 해제
    cv::destroyAllWindows(); // 모든 창 닫기

    return 0; // 프로그램 종료
}

3) 캡쳐하기
C++17의 <filesystem> 헤더를 사용
솔루션 탐색기에서 프로젝트를 마우스 오른쪽 버튼으로 클릭하고 "속성"을 선택합니다.
구성 속성 대화 상자에서 "C/C++" 항목을 선택합니다.
"언어" 옵션으로 이동하여 "C++ 표준"을 선택합니다.
드롭다운 목록에서 "C++17 (/std:c++17)"을 선택합니다.

#include <opencv2/opencv.hpp> // OpenCV 라이브러리를 포함
#include <iostream>
#include <filesystem> // C++17 이상에서 파일 및 디렉토리 작업을 위한 헤더

int main() {
    cv::VideoCapture cap("out.avi"); // 동영상 파일 열기

    // 동영상 파일이 성공적으로 열렸는지 확인
    if (!cap.isOpened()) {
        std::cout << "동영상 파일을 열 수 없습니다." << std::endl;
        return -1; // 프로그램 종료
    }

    std::cout << "동영상 파일이 성공적으로 열렸습니다." << std::endl;

    std::string save_dir = "./cap_img/"; // 이미지 저장 디렉토리 경로
    std::filesystem::create_directories(save_dir); // 디렉토리 생성 (C++17 이상)

    int num = 0; // 이미지 파일명을 위한 카운터

    while (true) {
        cv::Mat frame; // 프레임 저장용 Mat 객체

        cap.read(frame); // 동영상에서 프레임 읽기

        if (frame.empty()) { // 프레임이 비어있으면
            std::cout << "프레임을 읽을 수 없거나 동영상이 끝났습니다." << std::endl;
            break; // 무한루프 탈출
        }

        cv::imshow("video", frame); // 프레임 화면에 표시

        int key = cv::waitKey(33); // 33ms 동안 키 입력 대기

        if (key == 'q') { // 'q' 키를 누르면
            std::cout << "종료..." << std::endl;
            break; // 무한루프 탈출
        }

        if (key == 's') { // 's' 키를 누르면
            std::cout << "프레임을 이미지로 저장..." << std::endl;
            std::string image_path = save_dir + "cap_img" + std::to_string(num) + ".jpg"; // 이미지 파일 경로 생성
            bool success = cv::imwrite(image_path, frame, {cv::IMWRITE_JPEG_PROGRESSIVE, 0}); // 이미지 저장
            if (success) {
                std::cout << "이미지가 저장되었습니다: " << image_path << std::endl;
                num++; // 이미지 카운터 증가
            } else {
                std::cout << "이미지 저장 실패" << std::endl;
            }
        }
    }

    cap.release(); // 비디오 캡처 해제
    cv::destroyAllWindows(); // 모든 OpenCV 창 닫기

    return 0; // 프로그램 종료
}

4) 픽셀값읽기변경
#include <opencv2/opencv.hpp> // OpenCV 라이브러리 포함

int main() {
    // 이미지 파일 읽기
    cv::Mat img = cv::imread("rudy.jpg");

    // 이미지에서 (100, 100) 위치의 픽셀값 출력
    cv::Vec3b pixel = img.at<cv::Vec3b>(100, 100);
    std::cout << "Pixel value at (100, 100): B=" << (int)pixel[0] << " G=" << (int)pixel[1] << " R=" << (int)pixel[2] << std::endl;

    // 이미지에서 픽셀값 변경
    img.at<cv::Vec3b>(100, 100) = cv::Vec3b(0, 0, 255);
    img.at<cv::Vec3b>(100, 101) = cv::Vec3b(0, 0, 255);
    //img.at<cv::Vec3b>(100, 301) = cv::Vec3b(0, 0, 255);
    //img.at<cv::Vec3b>(101, 301) = cv::Vec3b(0, 0, 255);

    // 변경된 이미지 출력
    cv::imshow("dog", img);
    cv::waitKey(0);
    cv::destroyAllWindows();

    return 0;
}

5) 이미지영역 자르기(ROI:Region of Interest)
#include <opencv2/opencv.hpp>

int main() {
	cv::Mat img = cv::imread("rudy.jpg");

	if (img.empty()) {
		std::cout << "Could not read the image" << std::endl;
		return -1;
	}

	std::cout << "Image shape: " << img.size() << std::endl;
	std::cout << "Image size: " << img.total() << std::endl;
	
	cv::Rect roi(50, 150, 150, 150); //ROI
	cv::Mat roi_img = img(roi); //Extract ROI

	cv::imshow("dog_face", roi_img);
	cv::waitKey(0);
	cv::destroyAllWindows();

	return 0;
}

6) 이미지에 도형그리기고 텍스트출력하기
#include <opencv2/opencv.hpp>
#include <iostream>

int main() {

	//이미지파일을 읽어와서 Mat객체에 저장
	cv::Mat img = cv::imread("rudy.jpg");

	//이미지에 직사각형 그리기
	cv::rectangle(img
		, cv::Point(50, 150)
		, cv::Point(200, 300)
		, cv::Scalar(0, 0, 255)
		, 3);

	//이미지에 텍스트 입력하기
	cv::putText(img //cv::Mat or cv::UMat or cv::MatExpr ..
		, "Dog" //문자열
		, cv::Point(50, 140) //시작위치
		, cv::FONT_HERSHEY_SIMPLEX  //폰트형태 FONT_HERSHEY_PLAIN 
		, 0.5 //텍스트의 크기 비율
		, cv::Scalar(255, 0, 0) //텍스트의 색상 Scalar(Blue, Green, Red)
		, 2); //텍스트 선의 두께, 기본 1

	//이미지를 윈도우에 표시
	cv::imshow("dog", img);

	//사용자 입력 대기
	cv::waitKey(0);

	//모든 생성된 창 닫기
	cv::destroyAllWindows();

	return 0;
}

7) HSV(Hue, Saturation, Value)
HSV색상공간으로 이미지를 변환한 후 이를 보여주는것은 
이미지처리 및 컴퓨터 비전 분야에서 흔히 사용된다.
이러한 변환은 이미지에서 색상 정보를 분석하거나 특정 색상 범위를 추출하는 등의
작업을 수행할 때 유용하다.
일반적으로 HSV색상 공간은 RGB보다 색상정보를 나타내는 데 더 적합하며,
특히 색상에 관련된 작업을수행할 때 유용하다.
예를 들어 이미지에서 특정 색상의 물체를 추출하거나 배경을 제거하는 경우에
HSV공간을 사용하여 더 쉽게 처리할 수 있다.

ㄱ. 색상추적하기
import cv2
import numpy as np

dog = cv2.imread('rudy.jpg')
dog_hsv = cv2.cvtColor(dog, cv2.COLOR_BGR2HSV)

cv2.imshow('dog', dog_hsv)
cv2.waitKey(0)
cv2.destroyAllWindows()

ㄴ. 최소값과 최대값 사이에 있는 값을 마스크로 지정, 범위안에 들어간 값들만 출력
마스킹 : 이미지 처리에서 특정 영역을 선택하거나 제외하는 데 사용되는 기술
이진이미지(흑백)로 표현되며, 마스크라고도한다.
이진이미지에서 픽셀 값이 0인 부분은 해당 영역을 표시하지 않는것으로 간주되고
0이 아닌 부분은표시되는 영역을 나타낸다. 
주로 이미지의 일부분에만 특정 작업을 수행하려는 경우에 사용
배경을 제거하거나 특정 색상을 강조하기 위해 마스킹을 사용할 수 있다.
이미지 합성, 객체 추적, 이미지 분할 등의 작업에서도 마스킹이 사용될 수 있다.
이 코드에서는 HSV 이미지에서 특정 색상을 마스킹하여 해당 색상만을 강조하고
나머지는 제거하는데 사용된다. 특정 색상 범위에 해당하는 픽셀은 흰색으로 표시하고
그외의 픽셀은 검은색으로 표시하여 해당 범위의 픽셀만을 유지한다. 이후
해당 마스크를 사용하여 이미지에 효과를 적용하거나 필터링을 수행할 수 있다.
#include <opencv2/opencv.hpp>
#include <iostream>

int main() {

	//이미지 파일 읽기
	cv::Mat dog = cv::imread("rudy.jpg");

	//BGR을 HSV로 변환(이미지 픽셀값을 색상/채도/명도로 나타냄)
	cv::Mat dog_hsv;
	cv::cvtColor(dog, dog_hsv, cv::COLOR_BGR2HSV);

	//마스크 최소 및 최대 범위 지정(색상,채도,밝기)
	//마스크가 감지해야될 색상,채도,밝기의 최소값
	//-10:빨간색(Hue값이 0에 가까운 값)을 중심으로 좌우로 약간의 여유 줌
	//100:채도, 최소 채도100이상이어야 마스크에 포함
	//100:밝기, 최소 밝기100이상이어야 마스크에 포함
	cv::Scalar lower(-10, 100, 100); 
	//마스크의 최대 범위(마스크가 감지해야 할 색상,채도,밝기의 최대값 설정
	//10:빨간색(Hue값이 0에 가까운 값)을 중심으로 좌우로 약간의 여유를 줌
	//255:채도의 최대값
	//255:밝기의 최대값
	cv::Scalar upper(10, 255, 255);

	//범위에 따라 마스크 생성
	cv::Mat mask;
	//지정된 범위내의 픽셀을 흰색으로, 그렇지 않은 픽셀은 검은색으로 설정
	cv::inRange(dog_hsv, lower, upper, mask);

	//이미지에 마스크 적용
	cv::Mat result;
	cv::bitwise_and(dog, dog_hsv, result, mask = mask);

	//변환된 이미지 표시
	cv::imshow("dog", dog_hsv);

	cv::waitKey(0);

	cv::destroyAllWindows();

	return 0;
}

8) 모서리검출(Canny edge)
#include <opencv2/opencv.hpp>
#include <iostream>

int main() {
	//이미지 읽기
	cv::Mat img = cv::imread("rudy.jpg");

	//그레이스케일 이미지로 변환
	cv::Mat img_gray;
	cv::cvtColor(img, img_gray, cv::COLOR_RGB2GRAY);

	//좌표값을 찾음
	std::vector<cv::Point2f> corners;
	//이미지에서 코너를 찾음
	cv::goodFeaturesToTrack(img_gray, corners, 25, 0.01, 10);

	//모서리에 점 표시
	for (int i = 0; i < corners.size(); i++) {
		//코너의 좌표를 정수로 변환
		int x = cvRound(corners[i].x);
		int y = cvRound(corners[i].y);
		//이미지에 점을 그림
		cv::circle(img, cv::Point(x, y), 3, cv::Scalar(255, 0, 0), -1);
	}

	//이미지 표시
	cv::imshow("corners", img);

	cv::waitKey(0);
	cv::destroyAllWindows();

	return 0;
}

9) 윤곽선 검출
#include <opencv2/opencv.hpp>
#include <iostream>

int main() {

	//이미지읽기(그레이스케일)
	cv::Mat img = cv::imread("rudy.jpg", cv::IMREAD_GRAYSCALE);

	//이미지 표시
	cv::imshow("original", img);

	//Canny edge 검출
	cv::Mat edge;
	cv::Canny(img, edge, 50, 250);

	//엣지를 반전하여 역방향 엣지 생성
	cv::Mat edge_reverse = cv::Scalar::all(255) - edge;

	//엣지 이미지 표시
	cv::imshow("edge", edge);
	cv::imshow("edge_reverse", edge_reverse);

	//사용자 키 입력 대기
	cv::waitKey(0);

	//모든 창 닫기
	cv::destroyAllWindows();

	return 0;
}

10) 얼굴검출
#include <opencv2/opencv.hpp>
#include <iostream>

int main() {

	//얼굴영역 검출을 위한 분류기 불러오기
	cv::CascadeClassifier face_cascade;
	if (!face_cascade.load("haarcascade_frontalface_default.xml")) {
		std::cerr << "Could not load face cascade classifier." << std::endl;
		return -1;
	}

	//이미지 읽기
	cv::Mat img = cv::imread("faces.jpeg");
	if (img.empty()) {
		std::cerr << "Could not read the image." << std::endl;
		return -1;
	}

	//이미지를 흑백으로 변환
	cv::Mat img_gray;
	cv::cvtColor(img, img_gray, cv::COLOR_BGR2GRAY);

	//얼굴검출
	std::vector<cv::Rect> faces;
	//scaleFactor : 이미지의 크기를 줄이는 비율
	//이 값은 얼굴이 검출되지 않을 때 이미지의 크기를 얼마나 줄일지결정
	//작은값은 검출률이 높지만 계산량이 많아질 수 있다.
	//1.1에서 1.5사이의 값을 사용한다.
	//minNeighbors:각 후보 사각형이 얼마나 많은 이우슬 가져야 하는지를
	//결정하는 매개변수이다. 값이 높을 수록 잘못된 얼굴이 제거 되지만
	//정확도가 낮아질 수 있다. 보통 3에서 6사이의 값을 사용한다.
	face_cascade.detectMultiScale(img_gray, faces, 1.3, 5);

	//검출된 얼굴에 사각형 그리기	
	for (size_t i = 0; i < faces.size(); i++) {
		cv::rectangle(img, faces[i], cv::Scalar(255, 0, 0), 2);
	}

	//얼굴이 그려진 이미지 표시
	cv::imshow("face", img);

	//사용자 키 입력 대기
	cv::waitKey(0);

	//모든 OpenCV창 닫기
	cv::destroyAllWindows();

	return 0;
}

11) 눈검출

