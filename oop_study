//클래스 다이아그램
+-----------------------------------+
|               Shape               |
+-----------------------------------+
| - color: std::string              |
+-----------------------------------+
| + Shape(color: std::string = "undefined") |
| + virtual area(): double          |
| + virtual perimeter(): double     |
| + virtual name(): std::string     |
| + setColor(color: std::string)   |
| + getColor(): std::string         |
+-----------------------------------+
            /\
            |
            |
            |
            |
            |
+-----------------------------------+
|            Rectangle              |
+-----------------------------------+
| - width: double                   |
| - height: double                  |
+-----------------------------------+
| + Rectangle(width: double, height: double, color: std::string = "undefined") |
| + area(): double override         |
| + perimeter(): double override    |
| + name(): std::string override    |
+-----------------------------------+

// Shape.h
#ifndef SHAPE_H
#define SHAPE_H

#include <string>

class Shape {
private:
	std::string color;
public:
	Shape(const std::string& color = "undefined");
	virtual double area() const = 0; //순수 가상 함수
	virtual double perimeter() const = 0; //순수 가상 함수
	virtual std::string name() const = 0; //순수 가상 함수
	virtual ~Shape(); //가상 소멸자

	void setColor(const std::string& color);
	std::string getColor() const;
};

#endif //SAHPE_H

//Shape.cpp
#include "Shape.h"

Shape::Shape(const std::string& color) : color(color) {
	std::cout << "Shape 생성자" << std::endl;
}

Shape::~Shape() {
	std::cout << "Shape 소멸자" << std::endl;
}

void Shape::setColor(const std::string& color)
{
	this->color = color;
}

std::string Shape::getColor() const
{
	return color;
}

//main.cpp
#include "Rectangle.h"
#include <iostream>

int main() {
	Shape* s = new Rectangle(3, 5);
	s->setColor("red");
	std::cout << s->getColor() << std::endl;
	delete s;
}

Shape 생성자
Rectangle 생성자
red
Rectangle 소멸자
Shape 소멸자

1. Shape.h
1) 헤더가드
#ifndef SHAPE_H,#define SHAPE_H,#endif //SAHPE_H
헤더파일이 여러 번 포함되는 것을 방지 하기 위해 사용된다.
컴파일 시간 오류를 방지하고 코드의 안정성을 높인다.
다중 포함을 방지하여 컴파일 오류를 피하고, 컴파일 시간을 줄이며, 코드의 
일관성을 유지하기 위해 사용된다.

2) 색상속성
private:
    std::string color;
도형의 색상을 나타내는 color 멤버 변수를 private로 선언하여 
직접 접근을 막고, 대신 public 멤버 함수를 통해 접근한다.
정보 은닉(Information Hiding)을 통해 데이터 무결성을 유지하고,
클래스의 인터페이스와 구현을 분리하여 유지보수성과 확장성을 높인다.

3) 생성자
public":
Sahpe(const std::string& color = "undefined") : color(color);
생성자는 객체가 생성될 때 호출되며, 기본적으로 색상을 undefined로 설정.
기본 값을 제공함으로써 객체 생성 시 불필요한 초기화 코드를 줄이고
사용 편의성을 높인다.
상수참조(const std::string&)는 매개변수를 상수 참조로 받는다.
-복사방지 : 문자열을 값으로 전달하면 복사가 일어난다. 복사는 시간과 메모리
측면에서 비효율적일 수 있다. 참조를 사용하면 이러한 복사를 피할 수 있다.
-불변성 : const 키워드를 사용하면 함수 내부에서 매개변수를 수정할 수 없게
되어 원본 데이터가 변경되지 않음을 보장한다.

4) 순수가상함수
virtual doble area() const = 0;
virtual double perimeter() const = 0;
virtual str::string name() const = 0;
Shape 클래스가 추상 클래스가 되게 하며, 상속받는 파생 클래스가 반드시
이 함수들을 구현하도록 강제한다.
-다형성(Polymorphism) : 순수 가상 함수를 사용하여, 동일한 인터페이스를 통해
다양한 도형 객체를 일관되게 처리할 수 있다.
-확장성 : 새로운 도형 클래스를 추가할 때, Shape클래스를 상속받아 필요한 함수
들을 구현하기만 하면 되므로, 기존 코드를 수정할 필요 없이 기능을 확장할 수
있다.
-유연성 : 프로그램이 구체적인 도형 클래스에 의존하지 않도록 하여, 변경에
유연하게 대응할 수 있다.

5) 가상 소멸자
virtual ~Shape()
파생 클래스와 객체가 올바르게 소멸되도록 보장한다.
기본 클래스 포인터로 파생 클래스 객체를 삭제할 때, 올바른 소멸자가 호출되어
메모리 누수를 방지하고 자원을 올바르게 해제할 수 있다.
추상클래스의 소멸자가 호출되면 파생클래스의 소멸자도 호출된다.

#include "Shape.h"
#include "Rectangle.h"

int main() {
	Shape* s = new Rectangle(3, 5);
	delete s;
}

Shape 생성자
Rectangle 생성자
Rectangle 소멸자
Shape 소멸자

6) 색상 설정 및 반환 함수
void setColor(const std::string& color){
	this->color = color;
}

std::string getColor() const{
	return color;
}

-캡슐화(Capsulation) : 멤버 변수에 직접 접근하는 것을 막고, 함수를 통해
안전하게 접근할 수 있도록 한다.
-유지보수성 : 멤버 변수를 변경할 때마다 다른 코드를 수정할 필요 없이, 
해당 함수만 수정하면 되므로 유지보수가 용이하다.

2. Shape.cpp
1) 헤더파일포함
#include "Shape.h"
Shape클래스의 선언이 포함되어 있다. 이 파일을 포함함으로써 Shape 클래스의 
정의와 멤버 함수 선언을 사용할 수 있다.

2)생성자 구현
Shape::Shape(const std::string& color) : color(color) {
	std::cout << "Shape 생성자" << std::endl;
}
도형의 초기색상을 설정한다. 생성자가 호출될 때 멤버 변수를 초기화하는 
효율적인 방법이다.

3)소멸자 구현
Shape::~Shape(){
	std::cout << "Shape 소멸자" << std::endl;
}
Shape클래스의 가상 소멸자이다. 파생클래스의 소멸자가 올바르게 호출되도록
보장한다. 이 소멸자는 Shape 객체가 소멸될 때 호출된다.

4)색상설정함수구현
void Shape::setColor(const std::string& color){
	this->color = color;
}
private멤버변수인 color변수를 설정한다. 매개변수로 받은 color값을 
this포인터를 사용하여 현재 객체의 color 멤버 변수에 할당한다. 
this포인터는 멤버 함수가 호출된 객체의 주소를 가리키는 특별한 포인터로
이를 통해 멤버 변수와 매개변수의 이름이 동일하더라도 구별할 수 있다.
하지만, 변수명을 겹치지않게하고 this를 사용하여 명확히 구분하는 방식을 
더 선호한다. 코드의 가독성을 높이고 유지보수성을 향상시키는 데 도움이되며
코드베이스의 일관성을 유지하는 데 도움이된다.
-> : 포인터가 가리키는 객체의 멤버에 접근하기 위해 사용된다.

//Circle 추가
+-----------------------------------+
|               Shape               |
+-----------------------------------+
| - color: std::string              |
+-----------------------------------+
| + Shape(color: std::string = "undefined") |
| + virtual area(): double          |
| + virtual perimeter(): double     |
| + virtual name(): std::string     |
| + setColor(color: std::string)   |
| + getColor(): std::string         |
+-----------------------------------+
            /\
            |
            |
            |
            |
            |
+-----------------------------------+
|            Rectangle              |
+-----------------------------------+
| - width: double                   |
| - height: double                  |
+-----------------------------------+
| + Rectangle(width: double, height: double, color: std::string = "undefined") |
| + area(): double override         |
| + perimeter(): double override    |
| + name(): std::string override    |
+-----------------------------------+
            /\
            |
            |
            |
            |
            |
+-----------------------------------+
|              Circle               |
+-----------------------------------+
| - radius: double                  |
+-----------------------------------+
| + Circle(radius: double, color: std::string = "undefined") |
| + area(): double override         |
| + perimeter(): double override    |
| + name(): std::string override    |
+-----------------------------------+


//Circle.h

#ifndef CIRCLE_H
#define CIRCLE_H

#include "Shape.h"

class Circle : public Shape {
private:
	double radius;
public:
	Circle(double radius, const std::string& color = "undefined");
	virtual double area() const override; 
	virtual double perimeter() const override; 
	virtual std::string name() const override;
	virtual ~Circle() override;
};

#endif //CIRCLE_H

//Circle.cpp
#include "Circle.h"
#include <iostream>

const double PI = 3.141592;

Circle::Circle(double radius, const std::string& color)
	: Shape(color), radius(radius)
{
	std::cout << "Circle 생성자" << std::endl;
}

double Circle::area() const
{
	return PI * radius * radius;
}

double Circle::perimeter() const
{
	return 2 * PI * radius;
}

std::string Circle::name() const
{
	return "Circle";
}

Circle::~Circle()
{
	std::cout << "Circle 소멸자" << std::endl;
}

//main.cpp
#include "Rectangle.h"
#include "Circle.h"
#include <iostream>

int main() {
	Shape* s[2];
	s[0] = new Rectangle(3, 5);
	s[0]->setColor("red");
	std::cout << s[0]->getColor() << std::endl;

	s[1] = new Circle(2, "yellow");
	std::cout << s[1]->getColor() << std::endl;

	delete s[0];
	delete s[1];
}

Shape 생성자
Rectangle 생성자
red
Shape 생성자
Circle 생성자
yellow
Rectangle 소멸자
Shape 소멸자
Circle 소멸자
Shape 소멸자
