yolov5 & roboflow & colab

1. roboflow에서 이미지/영상파일을 업로드하고 어노테이션을한 후 데이터셋을 만들고 export합니다. 
이때, 아래와 같이 터미널값을 복사해놓습니다.
!curl -L "https://app.roboflow.com/ds/yDUduzbwoQ?key=wjj7WSYR5N" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip

2. colab에서 구글드라이브를 마운트합니다.
위치는 /content를 유지합니다.

3. yolov5를 설치합니다.
!git clone https://github.com/ultralytics/yolov5.git
%cd yolov5
! pip install -r requirements.txt

4. 데이터셋을 가져오기위해 1번에서 복사해둔 명령어를 실행합니다.
%cd content
!curl -L "https://app.roboflow.com/ds/yDUduzbwoQ?key=wjj7WSYR5N" > roboflow.zip; unzip roboflow.zip; rm roboflow.zip
(roboflow에서 복사하면 '>'이 문자를 확인합니다.)  
실행하면 /content 밑에 train, valid, test폴더와 data.yaml파일이 생성됩니다.

5. data.yaml파일을 수정합니다.
train: /content/train/images
val: /content/valid/images
test: /content/test/images

6. 학습시켜 best.pt를 만듭니다.
!python /content/yolov5/train.py --img 415 --batch 32 --epochs 100 --data /content/data.yaml --cfg /content/yolov5/models/yolov5s.yaml --weights /content/yolov5/yolov5s.pt --name cup_test
--img : 이미지사이즈 (640, 521..)
--batch : 배치사이즈(32, 64..)
--epochs : 학습횟수
--cfg : 모델아키텍쳐(ylolv5s.yaml, yolov5m.yaml, yolov5l.yaml, yolov5x.yaml ..)
--weights : 사전학습된 가중치
--name : 결과를 저장하는 디렉토리

7. 학습시켜 나온 best.pt로 detect해봅니다.
결과저장위치 : yolov5/runs/train/cup_test
!python /content/yolov5/detect.py --weights /content/yolov5/runs/train/cup_test/weights/best.pt --conf 0.5 --source /content/cups.png
Results saved to yolov5/runs/detect/exp2

8. 결과로 저장된 이미지를 열어 인식률을 확인하고 정확도가 낮을경우 재학습을 합니다.


